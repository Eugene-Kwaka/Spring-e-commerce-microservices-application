server:
  port: 8040

spring:
  data:
    mongodb:
      username: eugene
      password: eugene
      host: localhost
      port: 27017
      database: customer-service
      authentication-database: admin
#  mail:
#    host: localhost
#    port: 1025
#    username: eugene
#    password: eugene
#    properties:
#      mail.smtp.auth: true
#      mail.smtp.starttls.enable: true
#      mail.smtp.trust: "*"
#      mail.smtp.connectiontimeout: 5000
#      mail.smtp.timeout: 3000
#      mail.smtp.writetimeout: 5000

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: paymentGroup,orderGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
#        spring.json.type.mapping: orderConfirmationDTO:com.eugene.order_service.kafka.OrderConfirmationDTO,paymentConfirmationDTO:com.eugene.payment_service.kafkaproducer.PaymentConfirmationDTO
        # Send the orderConfirmationDTO object from the path in the notification-service and paymentConfirmationDTO from the path in the payment-service as well.
        spring.json.type.mapping: orderConfirmationDTO:com.eugene.notificationservice.kafka.order.OrderConfirmationDTO,paymentConfirmationDTO:com.eugene.notificationservice.kafka.payment.PaymentConfirmationDTO



